/*-------------------------------------------------------*/
/* BEGINNING OF WRAPPER CSS */

/* https: //www.youtube.com/watch?v=moBhzSC455o */

/* CSS VARIABLES: */
/*----------------------------------*/
/* :root represents the <html>element and is identical to the selector html,except that its specificity is higher */

:root {
  --primary: #ddd;
  --dark: #333;
  --light: #fff;
  --shadow: 0 1px 5px rgba(104, 104, 104, 0.8);
}

/* ENTIRE HTML DOCUMENT STYLE */
/*----------------------------------*/
html {
  box-sizing: border-box;
  font-family: Arial, "Times New Roman", sans-serif; /*cascading priority of font family depending on availability*/
  color: var(--dark);
}

/* BODY ELEMENTS */
/*----------------------------------*/
body {
  background: #ccc;
  margin: 30px 50px;
  line-height: 1.4; /*Specifies the multiplier (since no units used in this case) of font-size to create line height for fonts used */
}

/* ALL BUTTONS STYLE */
/*----------------------------------*/
/* This allows for consistent button presentation on the page */
.btn {
  background: var(--dark);
  color: var(--light);
  padding: 0.6rem 1.3rem; /*default font size is 16px, so 0.6*16 = top/bottom padding and 0.6*1.3 = left/right padding, rem is root element font size, em is parent element font size*/
  text-decoration: none; /*removes the underline for an anchor tag*/
  border: 0;
}

/* STYLE FOR ALL IMAGES */
/*----------------------------------*/
img {
  max-width: 100%;
  /*
  This encloses all images to be within the bounds of their parent container as MAX. Meaning they cannot grow beyond their parent container.

  However, if we want the image to always span the entire space of their container, we instead would set => width: 100%; rather than just specifying the max-width that an image can be.
  */
}

/* WRAPPER */
/*----------------------------------*/
/* The wrapper makes all elements within the wrapper (i.e., the nav, section, and footer child block level elements within the wrapper) into rows in the grid. Since the elements are block level, they just need spacing between them to separate the rows with no worries that a section will be inline with each other at some point. Also, specifying this wrapper as a grid with no set width or height delegates the height and width to be specified by the child elements. Therefore, the overall page height does not need to be known in order to space elements in the grid. */

.wrapper {
  display: grid;
  grid-gap: 20px;
}


/* NAV */
/*----------------------------------*/
/*An inline grid makes all sub elements into inline components meaning if they are inline elements, they will be inline, otherwise, they are */

.main-nav ul {
  display: grid;
  grid-gap: 20px;  /*This is same as grid-column-gap and grid-row-gap specified to 20px each*/
  padding: 0; /*This resets the ul default padding. The bullet of a list item is always outside of the box model including margin. */
  list-style: none; /*This set to none removes the bullets of the list*/
  grid-template-columns: repeat(4, 1fr); /*Setting the columns converts the unordered list into a row since grid items fill the grid from left to right row by row*/
}

.main-nav a {
  background: var(--primary);
  display: flex;  /*could also use block display and text align center*/
  justify-content: center;  /*equivalent of text-align: center for a block level display element*/
  text-decoration: none;
  padding: 0.8rem; /*Note that the rem is for root element's font size which is the document's default which is 16px and not the font-size set for these elements*/
  color: var(--dark);
  text-transform: uppercase; /*Allows formatting of text*/
  font-size: 1.1rem;
  box-shadow: var(--shadow);
}

/*
  Hover states are specified as follows:
  a:hover where the :hover immediately follows the selected element(s) so it can also be div:hover, etc.

  Hover states typically (such as this one) just reverse the color scheme where background becomes color and color becomes the background.
*/

.main-nav a:hover {
  background: var(--dark);
  color: var(--primary);
}


/* TOP CONTAINER */
/*----------------------------------*/
.top-container {
  display: grid;
  grid-gap: 20px;

  /* To be more controlling of the specification: */
  /* grid-template-columns: 2fr 1fr;
  grid-template-rows: 1fr 1fr; */

  /* Otherwise you can name template areas and assign them to elements. Note that the box width and height of the grid items is not controlled using this template area method. The width and height of the elements defaults to the size of the contents in the item. Therefore, within each grid item you need to specify the height and width dimensions or pad/margin/border the elements to control the size of the items.*/
  grid-template-areas:
    'showcase showcase top-box-a'
    'showcase showcase top-box-b';
}

  .showcase {
    /* grid-row-start: 1;
    grid-row-end: 3;
    grid-column-start: 1;
    grid-column-end: 2; */

    grid-area: showcase;

    min-height: 400px;

    background: url(image/pic1.jpg);
    background-size: cover;
    background-position: center;

    padding: 3rem;

    display: flex;
    flex-direction: column;
    align-items: flex-start;  /*This deals with the centering of flex items along the cross-axis*/

    justify-content: center;  /*This deals with the spacing of flex items along the main-axis.*/

    box-shadow: var(--shadow);
  }

    .showcase h1 {
      font-size: 4rem;
      margin-bottom: 0;
      color: var(--light);
    }

    .showcase p {
      font-size: 1.3rem;
      margin-top: 0;
      color: var(--light);
    }

  .top-box {
    background: var(--primary);
    /* display: grid;
    align-items: center;
    justify-content: center; */

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow);
    padding: 1.5rem;
  }

    .top-box .price {
      font-size: 2.5rem;
    }

  .top-box-a {
    /* grid-row-start: 1;
    grid-row-end: 2;
    grid-column-start: 2;
    grid-column-end: 3; */

    grid-area: top-box-a;
  }

  .top-box-b {
    /* grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 3; */

    grid-area: top-box-b;
  }

/* BOXES */
/*----------------------------------*/

.boxes {
  display: grid;
  grid-gap: 20px;
  /* grid-template-columns: 1fr 1fr 1fr 1fr; */

  /* Setting a minmax with min of 200px and max of 1fr (i.e., the width of the entire grid container) leads to stretching and shrinking of the grid items when the view width is changed. It tries to fit as many 200px containers into a grid row from left to right while maintaining a grid-gap of 200px.*/
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.box {
  background: var(--primary);
  box-shadow: var(--shadow);

  padding: 1.5rem;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}



/* The flexbox route of designing a responsive grid doesn't allow for the flex items to grow while still adding as many items to a line as possible unless the width of the flex item was tied to the width of the flex container and scaled proportionate to it.

Another downside is that the space between the flex items cannot be easily set because the options are to use space-between or space-evenly or to set a margin but the margin will double up between flex items.

The other aspect that makes grid layout tough with flexbox is that even the flex box container needs a width and height in order to vertically space out items. If it is left to be only as big as its elements, the vertical height of the flex items may not have room for a gap above and below them unless a margin is specified since space-between/around won't work.*/

/* .boxes {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-start;
  align-content: space-between;

  flex-wrap: wrap;
}

.box {
  background: var(--primary);
  box-shadow: var(--shadow);

  padding: 1rem;


  min-width: 200px;
  max-width: calc(.20*100vw);

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
} */

/* INFO SECTION */
/*----------------------------------*/
.info {
  background: var(--primary);
  box-shadow: var(--shadow);

  display: grid;
  grid-gap: 30px;
  grid-template-columns: repeat(2, 1fr);
  padding: 3rem;
}

/* PORTFOLIO */
/*----------------------------------*/
.portfolio {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  grid-gap: 20px;
}

.portfolio img {
  border-radius: 10px;
  width: 100%;
  /*By specifying that the width is 100% of it's container even though the max-width was already set for all images means that we want just these images to span the entirety of their parent container.

  It is also important to note that scaling the width for the image will also scale the height of the image. And since the height is unconstrained by the grid, it will scale in proportion to the width, thereby elogating the grid for this section of the page.
  */
  box-shadow: var(--shadow);
}


/* FOOTER */
/*----------------------------------*/
footer {

  background: var(--dark);
  color: var(--light);
  margin-top: 2rem;
  padding: 1rem;
  text-align: center;


  /* display: flex;
  flex-direction: row;
  justify-content: center; */

  /* align-content: center; */

  /* The reason align-content is not needed is because align-content in this case impacts the flex items row to row, and in this case, there is only one row so it doesn't make a difference. Also, the way this page was designed was to omit the need to specify height anywhere in all of the css. Therefore, the natural content height based on the content, padding and the box model is what passively dictates the height. That means, flex items will always take up the entire flex container height with no extra room, rendering the need to specify how to align something in the vertical space unnecessary.*/
}


/* MEDIA QUERIES */
/*----------------------------------*/

/* When setting the criteria for a media query, use max-width or min-width (i.e., ranges) because you want to encapsulate all widths up to max width of ___ or all widths after (i.e. min width) a set point. If you just use (width: 700px), then only when the width hits this value will the effect take place. A width of 701 or 699 will not result in the effect taking place.*/

@media (max-width: 700px) {
  .top-container {

    /* When specifying grid template areas, using a new line will not work. 'showcase showcase \n top-box-a top-box-b';

    Rows in the grid need to be separated by a separate set of quotations inline or on the next line:

      'showcase showcase''top-box-a top-box-b';

      is the same as

      'showcase showcase'
      'top-box-a top-box-b';

    */

    grid-template-areas:
      'showcase showcase''top-box-a top-box-b';
  }

  .showcase h1 {
    font-size: 2.5rem;  /*shrinks the text size*/
  }

  .main-nav ul {
    grid-template-columns: 1fr; /*makes the grid 1 column wide*/
  }

  .info {
    grid-template-columns: 1fr;
  }

  .info .btn {
    display: block;
    text-align: center;
  }
}


@media (max-width: 500px) {
  .top-container {
    grid-template-areas:
      'showcase'
      'top-box-a'
      'top-box-b';
  }
}


/* END OF WRAPPER CSS */
/*-------------------------------------------------------*/
