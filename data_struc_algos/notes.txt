PROBLEM TYPES:
- Traversal of a data structure and do ___
  Ex.) BF or DF of a tree/graph to find something in least steps possible / binary search to find something

- Design an algorithm to solve a problem and optimize it for time complexity
  - Optimize it using a data structure
  - Ex.) Represent a board as a bunch of tree nodes and traverse it that way.

- Design a algo to move through a set of data as efficiently as possible to solve ___.
  - These algos usually need to do something while moving through. Those sub actions can be
  stubbed out into separate helpers to abstract away actions.
  - Ex.) Binary search to find things you stash into a data structure etc.



//BINARY TREE:

- TRAVERSAL METHODS:

Inorder - L N R
Preorder - N L R
Postorder - L R N

Depth First Traversals of Trees:
     1
    /\
   2  3
  /\
 4  5
     \
      6
(a) Inorder (Left, Root, Right) : 4 2 5 6 1 3
    - find left most node
      - traverse left, root, right
(b) Preorder (Root, Left, Right) : 1 2 4 5 3
(c) Postorder (Left, Right, Root) : 4 5 2 3 1

Level - keeping track of level in tree, moving left to right on each node
Zigzag - keep track of level in tree, moving left to right, then right to left

Binary Tree:
      8
    /   \
   3     20
  / \   /  \
1    5 10    25
      / \      \
     9   15    100

- Value on the left is < the head, value on the right is > the head.
- All values are unique.
- Each node can only hold 2 values, a left value and right value.
- Access - O(h) where h is height of the tree, on a unbalanced tree of 8->10->25->100, it is O(n)
- Search - O(h) where h is height of the tree, on a unbalanced tree of 8->10->25->100, it is O(n)
- Insertion - O(1)
- Deletion -

  Access/Search Logic:
    Start with the head node as the current node
    While (current node is not the given value):
      Check if the current node's value is the target value
        Return the current node
      Check if there is a left node
        Check if the target value is between left and current value
          Set the left node to be the current node, loop again
      Check if there is a right node
        Check if the target value is between right and current value
          Set the right node to be the current node, loop again
      Else return null for not found

  Insertion Logic:
    Perform Search, but search for the node where to add the new value to

    Start with the head node as the current node
    While (hasBeenAdded) //note: since we are not looking for a specific value and thus know what we are looking for, the exit criteria is set to a flag that is toggled once a node has been added
      Check if the new value is less than the current node
        Check if the current node has a left node
          Set the current node to be the left node, loop again
        Set the left node of the current node to a new node with the new Value
          Set flag to exit loop
      Check if the current node has a right node
        Set the current node to be the right node, loop again
      Add new node as the right node of the current node
        Set flag to exit loop

  Deletion Logic:
    Perform Search for the target, but also keep track of the previous node

    Start with the head node as the current node
    Assign a variable to keep track of previous node
    < Same logic as search, but saving the previous node into a variable outside the loop >

    Check if the current node (the node to be deleted) has a left node
      Assign the previous node's left (or right) to the current's left node
        Check if the current node has a right node, select every node and reassign it to the new left node
    Assign the previous node's left (or right) to the current's right node


//----------------------------------------------------------------------------
HEAP:

Heap: (min or max is the parent node (the node at the top))

- Heap is a like a binary tree with 2 childs per parent.
- Heap is inserted left to right no matter what. Then the node is bubbled up to it's "right" location that satisfies the heap criteria.
- There is no concept of a left or right node because that order doesn't matter unlike a binary tree.
- Heap criteria for final placement is that it is less than the parent node AND its child nodes need to be less than it.


//----------------------------------------------------------------------------
NOTES ON ALGOS:

- While and Recursion are used when you want to abstract (not actively manage) the number of iterations the program must go through. They should be used when it is HARD to actively count the number of loop iterations or it is not possible to know beforehand such as in a BFS or DFS.
  - A for loop should be used when it is EASY to determine the number of iterations.

- Try to abstract extra steps out of managing a process.
  - Using a queue and a while loop to manage BF traversal by popping item onto the queue
